class Solution {
public:

int findFirst(vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1;
        int first = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (nums[mid] == target) {
                first = mid;         // store the index
                high = mid - 1;      // keep searching in left half
            } else if (nums[mid] < target) {
                low = mid + 1;       // move to right half
            } else {
                high = mid - 1;      // move to left half
            }
        }
        return first;
    }

    // Function to find last occurrence
    int findLast(vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1;
        int last = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (nums[mid] == target) {
                last = mid;          // store the index
                low = mid + 1;       // keep searching in right half
            } else if (nums[mid] < target) {
                low = mid + 1;       // move to right half
            } else {
                high = mid - 1;      // move to left half
            }
        }
        return last;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
      int first = findFirst(nums, target);
        int last = findLast(nums, target);
        return {first, last};
    }
};
